# -*- coding: utf-8 -*-
"""week1_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NCZcLSrzcCmEHzQjBcKXaL4FcJvB6Z6m

## Project Title : Dark Web Cybercrime Dataset Analysis

**Objectives**

Data Preprocessing and Cleaning

Categorization and Classification

Quantitative Analysis of Market Composition

Vendor Analysis

Relationship Analysis

Visualization and Reporting
"""

#---importing necessary libraries----
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#---Load dataset---
df = pd.read_csv("/content/Agora.csv", encoding='latin')

df.shape

# --------Preview first few rows-------
print("Dataset Preview:")
print(df.head())

#------- Check column names------
print("\nColumns in dataset:")
print(df.columns)

# --- Cleaning: standardize column names ---
# removes the trailing whitespace from all columns
df.columns = df.columns.str.strip().str.lower()

# ----Drop rows where important fields are missing-------
# removes rows where column has missing value (NaN)
df = df.dropna(subset=['category', 'item'])

# ------Convert Price------
#converting into floating values for better performance on numeric data
df['price'] = df['price'].astype(str).replace('[^0-9.]', '', regex=True)
df['price'] = pd.to_numeric(df['price'], errors='coerce')

#-------line plot of price column---------------
df.plot()
plt.show()

# ------Convert Rating to numeric, coercing errors to NaN---------
df['rating'] = df['rating'].astype(str).str.split('/').str[0]

#converts extracted string into a numeric format
df['rating'] = pd.to_numeric(df['rating'], errors='coerce')

# -------Drop rows where Rating is NaN---------
df.dropna(subset=['rating'], inplace=True)

df.plot(kind = 'scatter', x = 'price', y = 'rating')
plt.show()

# Frequency count for the 'vendor' column
vendor_freq = df['vendor'].value_counts()
print("\nTop 10 Vendors by Listings:")
print(vendor_freq.head(10))

# Plotting the top 10 vendors
plt.figure(figsize=(10, 5))
df['vendor'].value_counts().head(10).plot(kind='bar', color='lightgreen')
plt.title('Top 10 Vendors by Number of Listings')
plt.ylabel('Count')
plt.xlabel('Vendor')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# First, ensure there are no missing values in the columns we're plotting
plot_data = df.dropna(subset=['price', 'rating'])

# Create the scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(plot_data['price'], plot_data['rating'], alpha=0.5, c='green') # alpha for transparency
plt.title('Relationship between Price and Rating')
plt.xlabel('Price')
plt.ylabel('Rating')
plt.grid(True, alpha=0.3)

# Since price is skewed, set x-axis to log scale for better visualization
plt.xscale('log')
plt.show()

# --- Sample Analysis Goal ---
# Count frequency of credentials leaks & service ads

# ------Convert to lowercase for consistency---------
df['category'] = df['category'].str.lower()
df['item'] = df['item'].str.lower()

#----- Define keyword filters -------
cred_keywords = ["credential", "leak", "password", "account", "database"]
service_keywords = ["service", "ads", "advertisement", "subscription"]

# ------checking the leaks ----------
def classify_category(text):
    if any(word in text for word in cred_keywords):
        return "Credential Leak"
    elif any(word in text for word in service_keywords):
        return "Service Ad"
    else:
        return "Other"

df['classified'] = df['category'].apply(classify_category)
# Filter the DataFrame to show only rows classified as "Credential Leak"
credential_leaks_df = df[df['classified'] == 'Credential Leak']

# Display the filtered DataFrame
print("\nRows classified as Credential Leak:")
display(credential_leaks_df)

#----- Frequency count ------
freq = df['classified'].value_counts()

print("\nFrequency of classified categories:")
print(freq)

# --- Visualization ---
plt.figure(figsize=(6,4))
freq.plot(kind="bar", color=["red","blue","gray"])
plt.title("Frequency of Credential Leaks vs Service Ads")
plt.ylabel("Count")
plt.xlabel("Category")
plt.xticks(rotation=0)
plt.show()

# ---------- Distribution of Categories ----------
plt.figure(figsize=(10,5))
df['category'].value_counts().head(15).plot(kind='bar', color="skyblue")
plt.title("Top 15 Categories Distribution")
plt.ylabel("Count")
plt.xlabel("Category")
plt.xticks(rotation=75)
plt.show()

# ---------- Top Vendors by Listings ----------
plt.figure(figsize=(10,5))
df['vendor'].value_counts().head(10).plot(kind='bar', color="orange")
plt.title("Top 10 Vendors by Number of Listings")
plt.ylabel("Count")
plt.xlabel("Vendor")
plt.xticks(rotation=45)
plt.show()

# ----------  Category vs Vendor Heatmap ----------
vendor_cat = pd.crosstab(df['vendor'], df['category'])

# Calculate the total number of listings for each vendor
vendor_totals = vendor_cat.sum(axis=1)

# Select the top 15 vendors based on their total listings
top_vendors_index = vendor_totals.nlargest(15).index
top_vendor_cat = vendor_cat.loc[top_vendors_index]


plt.figure(figsize=(14,8))
sns.heatmap(top_vendor_cat, cmap="YlGnBu", linewidths=.5)
plt.title("Top Vendors vs Categories")
plt.xlabel("Category")
plt.ylabel("Vendor")
plt.show()